func-prog -> func-name formal-params '{' var-decl calc-main '}'
func-name -> Name
formal-params -> '(' var-names ')'
var-names -> var { ',' var }
var -> Name
var-decl -> 'int' var-names ';'
calc-main -> stats

stats -> { stat }
stat -> val-update-stat | if-stat | while-stat | loop-stat | return-stat | empty-stat
val-update-stat -> assign-stat | incr-stat | decr-stat
assign-stat -> var '=' num-expr ';'
incr-stat -> var '++' ';'
decr-stat -> var '--' ';'
if-stat -> 'if' '(' cond-expr ')' (stat | '{' stats '}') ['else' (stat | '{' stats '}')]
while-stat -> 'while' '(' cond-expr ')' (stat | '{' stats '}')
loop-stat -> 'loop' '(' num-expr ')' (stat | '{' stats '}')
return-stat -> 'return' '(' num-expr ')' ';'
empty-stat ->  // do nothing

cond-expr -> simple-cond-expr { '||' simple-cond-expr }
simple-cond-expr -> cond-term { '&&' cond-term }
cond-term -> '(' cond-expr ')' | '!' cond-term | atom-cond-expr
atom-cond-expr -> num-expr rel-ope num-expr
rel-ope -> '==' | '!=' | '<' | '<=' | '>' | '>='
num-expr -> ['-'] simple-num-expr { add-ope simple-num-ope }
add-ope -> '+' | '-'
simple-num-expr -> num-term { mul-ope num-term }
mul-ope -> '*' | '/' | '%'
num-term -> '(' num-expr ')' | atom-num-expr
atom-num-expr -> var | func | int-const
func -> func-name '(' [num-exprs] ')'
num-exprs -> num-expr { ',' num-expr }
int-const -> Num
